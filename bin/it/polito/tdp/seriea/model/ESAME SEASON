 /** ESAME 2
  * Alla pressione del bottone, creare un grafo che rappresenti per tutte le stagioni, la continuità della presenza di ciascuna
  * squadra da una stagione all’altra. Il grafo dovrà essere nonorientato e pesato, con i vertici che rappresentino le stagioni
  * presenti nel database, e gli archi il fatto in tale coppia di stagioni ci siano delle squadre comuni (ossia squadre che
  * hanno giocato in entrambe le stagioni). 
  * Il peso dell’arco tra due stagioni deve rappresentare il numero di squadre che hanno giocato nelle due stagioni.
  * 
  * Permettere all’utente di selezionare, da un menu a tendina, una delle stagioni presenti nel grafo, 
  * e premere il bottone “Connessioni Stagione”.
  * 
  *  Per la stagione selezionata nel menu a tendina, stampare l’elenco delle stagioni aventi squadre comuni con 
  *  quella selezionata, indicando il numero di squadre comuni ed ordinando il risultato per stagioni con data crescente.
  */

		
 public void creaGrafoSEASON() {	
		String s="";
		if (graphSeason==null)  graphSeason=new SimpleWeightedGraph<Integer,DefaultWeightedEdge>(DefaultWeightedEdge.class);	
		Graphs.addAllVertices(graphSeason, dao.getYears());//aggiungi vertici
		System.out.println("Grafo creato: " + graphSeason.vertexSet().size() );	

		//aggiungi archi

			for(Integer s1:graphSeason.vertexSet()){
				for(Integer s2:graphSeason.vertexSet()){
					if(s1!=null && s2!=null&& !s1.equals(s2) ){	
							//IMPOSTO ARCHI
							//numero squadre presenti in entrambe le stagioni
							List<String> m=dao.Squadre2Stagioni(s1, s2);
							Double peso= (double) m.size();
							//goal
							Integer peso2= dao.GoalTotali2Stagioni(s1, s2);
							Graphs.addEdgeWithVertices(graphSeason,s1, s2, peso);
							s+= s1+" "+ s2+" "+peso+"\n";	
				}
			}						
			}	
			
			System.out.println("Grafo creato: " + graphSeason.vertexSet().size() + " nodi, " + graphSeason.edgeSet().size() + " archi");	
			System.out.println(graphSeason);
			System.out.println(s);			
	}
	public List<Integer> getRaggiungibiliInAmpiezza(Integer partenza)
		{		List<Integer> vicini = new ArrayList<Integer>();
		BreadthFirstIterator<Integer, DefaultWeightedEdge> visita = 
					new BreadthFirstIterator<Integer, DefaultWeightedEdge>( this.graphSeason, partenza);		
			while(visita.hasNext()) //Finchè ogni nodo ha un successore
			{
				Integer s = visita.next(); //Prendo il successore
				vicini.add(s); //e lo metto nella lista
			}
			return vicini;
		}
	
 public List<IntegerPair> getDestinations( int start) {
		
		List<IntegerPair> list = new ArrayList<>();
		for (Integer end : this.getYears()) {
			DijkstraShortestPath<Integer, DefaultWeightedEdge> dsp = new DijkstraShortestPath<>(graphSeason, start, end);
			GraphPath<Integer, DefaultWeightedEdge> p = dsp.getPath();
			if (p != null) {
			// p.getEdgeList().size() è il numero di partite da aggiungere dopo p.getWeight() e aggiungi un int nella classe
				list.add(new IntegerPair(start,end, (int) p.getWeight()));    
			}
		}
		//ordinato per punti crescente  rispetto al team di partenza
		list.sort(new Comparator<IntegerPair>() {
			@Override
			//ordino in base a data crescente
			public int compare(IntegerPair o1, IntegerPair o2) {
				return Double.compare(o1.getN2(), o2.getN2());
			}
		});
	return list;
	}
	
	

	
	
	
 /** --------------------------------test model	---------------------------------------------------	*/		
	
	
			
//			System.out.println("---------------GRAFO Season----------------------");
//			model.creaGrafoSEASON() ;
//			List<Integer> ss= model.getRaggiungibiliInAmpiezza(2016);
//			System.out.println(ss);
//			List<IntegerPair> ips= model.getDestinations(2016);		
//			System.out.println(ips);


 /** --------------------------------DAO---------------------------------------------------	*/		


	
	/* @return numero squadre  nelle due stagioni	 */
	public List<String> Squadre2Stagioni(Integer s,Integer s1) {
		
		String sql = "SELECT m.hometeam FROM matches m "
				+ "WHERE  m.hometeam IN (SELECT DISTINCT hometeam FROM matches m WHERE m.`Season`= ?  GROUP BY  m.`HomeTeam`)"
				+ " AND m.hometeam IN (SELECT DISTINCT hometeam FROM matches m WHERE m.`Season`= ? GROUP BY m.`HomeTeam`) GROUP BY m.hometeam";
		
				
		List<String> result = new ArrayList<>() ;
		
		try {
			Connection conn = DBConnect.getConnection() ;
			PreparedStatement st = conn.prepareStatement(sql) ;
			st.setInt(1, s);
			st.setInt(2, s1);
			ResultSet res = st.executeQuery() ;
			while(res.next()) {
				result.add(new String (res.getString("m.hometeam")));
			}	
			 
			
			conn.close();
			return result ;
			
			} catch (SQLException e) {
	
			e.printStackTrace();
			throw new RuntimeException("Error in database query",e);
	
		}
	
	}

	/* @return  GOAL  tot, diff, casa, trasferta nelle due stagioni	 */
	public Integer GoalTotali2Stagioni(Integer s,Integer s1) {
		//TOTALI in 2 stagioni
		String sql = "SELECT sum(fthg+ftag) as dr FROM matches m WHERE  m.hometeam IN (SELECT DISTINCT hometeam FROM matches m GROUP BY m.`HomeTeam`) AND season=? OR season=?";
		//diff_reti in 2 stagioni
		String sql1 = "SELECT sum(fthg-ftag) as dr FROM matches m WHERE  m.hometeam IN (SELECT DISTINCT hometeam FROM matches m GROUP BY m.`HomeTeam`) AND season=? OR season=?";
		//in casa in 2 stagioni
		String sql2 = "SELECT sum(fthg) as dr FROM matches m WHERE  m.hometeam IN (SELECT DISTINCT hometeam FROM matches m GROUP BY m.`HomeTeam`) AND season=? OR season=?";
		//in trasferta in 2 stagioni
		String sql3 = "SELECT sum(ftag) as dr FROM matches m WHERE  m.hometeam IN (SELECT DISTINCT hometeam FROM matches m GROUP BY m.`HomeTeam`) AND season=? OR season=?";
		
					
		
		try {
			Connection conn = DBConnect.getConnection() ;
	
			PreparedStatement st = conn.prepareStatement(sql) ;
			st.setInt(1, s);
			st.setInt(2, s1);
			
			ResultSet res = st.executeQuery() ;
			res.next() ;
			Integer result = res.getInt("dr") ;
			
			conn.close();
			return result ;
			
			} catch (SQLException e) {
	
			e.printStackTrace();
			throw new RuntimeException("Error in database query",e);
	
		}
	}	



