 /** ESAME 3
  * Alla pressione del bottone, creare un grafo che rappresenti i risultati (in termini di punteggio) delle partite giocate da ogni
  * coppia di squadre, in tutte le stagioni disponibili. Il grafo dovrà essere orientato e pesato, con i vertici che
  * rappresentino i numeri di Goal fatti (es: 0, 1, 2, 3, …), e gli archi il fatto le partite siano terminate con il risultato dato
  * dai due vertici adiacenti. Ad esempio, l’arco tra il vertice 3 ed il vertice 1 rappresenta tutte le partite
  *  che sono terminate con il risultato di 3 ad 1.
  *  Il peso dell’arco deve rappresentare il numero di partite che avevano tale risultato (in ogni stagione).
  *  
  *  Permettere all’utente di selezionare, da un menu a tendina, il numero di goal corrispondente ad uno dei nodi presenti nel grafo, e premere il bottone “Connessioni Goal”.
  *  Per il numero di Goal selezionato nel menu a tendina, stampare l’elenco dei risultati in cui tali goal sono stati segnati 
  *  in casa (ed il numero di partite corrispondenti), in ordine decrescente di numero di partite.
  */
 
	public void creaGrafoGOAL() {
		String s="";
		if (graphGOAL==null) graphGOAL=new SimpleWeightedGraph<Integer,DefaultWeightedEdge>(DefaultWeightedEdge.class);	
		Graphs.addAllVertices(graphGOAL, this.getTotGOAL());//aggiungi vertici
		Map<String,Team> mapTEAM =dao.MapTeams();
		Map<Integer,Season>mapSEASON= dao.MapSeasons();
		//aggiungi archi
			for(Match mtemp:dao.getAllMatches(mapTEAM, mapSEASON)){	
				Integer home= mtemp.getFthg();
				Integer away= mtemp.getFtag();
						if(home!=null && away!=null && !home.equals(away) ){
							//CALCOLO PESO DIFFERENZA RETI 
							Integer peso=  dao.nPartiteFiniteXaY(home, away);				
							//IMPOSTO ARCHI															
							Graphs.addEdgeWithVertices(graphGOAL, home, away,peso);
							s+= home+"  "+ away +" "+ peso+"\n";						
					}
				}
//				}	
//			}
		System.out.println("Grafo creato: " + graphGOAL.vertexSet().size() + " nodi, " + graphGOAL.edgeSet().size() + " archi");	
		System.out.println(s);
	}
	
	public List<Integer> getRaggiungibiliInAmpiezza(Integer partenza)
	{		List<Integer> vicini = new ArrayList<Integer>();
	BreadthFirstIterator<Integer, DefaultWeightedEdge> visita = 
				new BreadthFirstIterator<Integer, DefaultWeightedEdge>( this.graphGOAL, partenza);		
		while(visita.hasNext()) //Finchè ogni nodo ha un successore
		{
			Integer s = visita.next(); //Prendo il successore
			vicini.add(s); //e lo metto nella lista
		}
		return vicini;
	}	
	
	public List<IntegerPair> getDestinations( int start) {
		
		List<IntegerPair> list = new ArrayList<>();
		for (Integer end : this.getTotGOAL()) {
			DijkstraShortestPath<Integer, DefaultWeightedEdge> dsp = new DijkstraShortestPath<>(graphGOAL, start, end);
			GraphPath<Integer, DefaultWeightedEdge> p = dsp.getPath();
			if (p != null) {
			// p.getEdgeList().size() è il numero di partite da aggiungere dopo p.getWeight() e aggiungi un int nella classe
				list.add(new IntegerPair(start,end, (int) p.getWeight()));    
			}
		}
		//ordinato per punti crescente  rispetto al team di partenza
		list.sort(new Comparator<IntegerPair>() {
			@Override
			public int compare(IntegerPair o1, IntegerPair o2) {
				return -Double.compare(o1.getNum(), o2.getNum());
			}
		});
	return list;
	}
	
 /** --------------------------------test model	---------------------------------------------------	*/		

	
//			System.out.println("-----------------GRAFO GOAL----------------------");
//			model.creaGrafoGOAL() ;
//			List<Integer> te= model.getRaggiungibiliInAmpiezza(3);
//			System.out.println(te);
//			List<IntegerPair> t= model.getDestinations(3);		
//			System.out.println(t);