 CONNECTIVITY INSPECTOR 
	 
1)  Escludendo gli aeroporti con zero rotte, determinare se nel grafo ottenuto è possibile da ogni aeroporto
	raggiungere ogni altro aeroporto.----->>> fortemente connesso? 
2) lista degli aereoporti connessi
3) numero degli aereoporti connessi
4) trovo (max) degli aereoporti connessi
5) trovo (max size) aereoporti connessi
6) trovo 5 achi con peso minimo di (max size)
6)Permettere all’utente di selezionare, da un menu a tendina, una delle squadre presenti nel grafo,
	e premere il bottone “Connessioni Squadra”.
------------------------------------

	private ConnectivityInspector<Airport,DefaultWeightedEdge> ci; 
 
 /* Escludendo gli aeroporti con zero rotte, determinare se nel grafo ottenuto è possibile da ogni aeroporto
 raggiungere ogni altro aeroporto.
 ----->>> fortemente connesso?  */	
 	
 	public String isConnesso () {
 		ci = new ConnectivityInspector<>(this.graph);
 	    if (ci.isGraphConnected()){ return "Il grafo--> fortemente connesso";	 }
 		else return "il grafo---> non fortemente connesso";
 	}
 			
 /* lista degli aereoporti connessi */
 		
 	 public List<Set<Team>> getConn(){	
 			ci = new ConnectivityInspector<>(this.graph);
 			return ci.connectedSets();
 		}
 		
 /* numero degli aereoporti connessi */
 		public int getNumberConn(){
 			return this.getConn().size();
 		}

 /* trovo (max) degli aereoporti connessi */
 		public Set<Team> MAXconnesso() {
 			Set<Team> MAX=null;
 			Double size=0.0;
 			for(Set<Team> atemp :this.getConn()){
 				 if(atemp.size()>size){
 					 size = (double) atemp.size();
 					 MAX=atemp;
 				 }	 
 			 }	 
 			return MAX;	
 		}
 	
 /* trovo (max size) aereoporti connessi */
 		public int MAXconnessioni() {
 			return this.MAXconnesso().size();		
 		}
 			
 /* trovo 5 achi con peso minimo di (max size) */				 
 		
 		public List<EdgePeso> get5ArchiMinWeight (){

 		  List<EdgePeso>  edgePeso= new  ArrayList<>();
 		  // avevo pensato di sostituire i vertici del grafo con il set trovato Max connesso per poi richiamare il metodo CreaGrafo()
 		 Set<Team> new_vertex =this.MAXconnesso();
 		 for (Team a1: new_vertex){
 		  for (Team a2: new_vertex){
 			  if (! a1.equals(a2)&& a1!=null&&a2!=null){ 
 				  //peso
 					DefaultWeightedEdge e=graph.getEdge(a1, a2);
 						if(e!=null ){
 							graph.getEdgeWeight(e);
 							edgePeso.add(new EdgePeso(e,graph.getEdgeWeight(e)) );
 						}					
 				  }  
 		  }	
 		 } 
 		 //peso minimo se ti chiede max devi cambiare nella classe EDGE PESO
 		 Collections.sort(edgePeso);
 		 return edgePeso.subList(0, 5);
 	    }
 	    
// Permettere all’utente di selezionare, da un menu a tendina, una delle squadre presenti nel grafo,  
// e premere il bottone “Connessioni Squadra”.
   	
		public Set<Team> getConn(String name){	
	 		ConnectivityInspector<Team,DefaultWeightedEdge> ci = new ConnectivityInspector<>(this.graphTEAM);
			return ci.connectedSetOf(mapTeam.get(name));
		}
 	
 	    
			
//			System.out.println("-------------CONNECTIVITY INSPECTOR----------------------");					
//			System.out.println("\n");
//		
//			System.out.println("\n------ è fortemente connesso?------ \n");			
//			System.out.println(model.isConnesso());	
//			
//			System.out.println("\n-------- connessioni grafo--------- \n");
//			int n=model.getNumberConn();
//			System.out.println(n);
//			
//			System.out.println("\n------ lista componenti connesse------ \n");		
//			List<Set<Team>> l =model.getConn(); 
//			System.out.println(l);	
//			
//			System.out.println("\n------- Arco max connesso------  \n");			
//			Set<Team> t=model.MAXconnesso(); 
//			System.out.println(t);
//			
//			System.out.println(" \n ------n archi Arco max connesso------  "\n");			
//			int nc=model.MAXconnessioni();   
//			System.out.println(nc);
//			
//			System.out.println("\n--------- 5 Archi di max connesso------- \n");
//			List<EdgePeso>e= model.get5ArchiMinWeight(); 
//			System.out.println(e);